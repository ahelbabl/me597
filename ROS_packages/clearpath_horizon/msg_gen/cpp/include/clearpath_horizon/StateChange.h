/* Auto-generated by genmsg_cpp for file /home/ahmed/me597/ROS_packages/clearpath_horizon/msg/StateChange.msg */
#ifndef CLEARPATH_HORIZON_MESSAGE_STATECHANGE_H
#define CLEARPATH_HORIZON_MESSAGE_STATECHANGE_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace clearpath_horizon
{
template <class ContainerAllocator>
struct StateChange_ : public ros::Message
{
  typedef StateChange_<ContainerAllocator> Type;

  StateChange_()
  : new_state()
  , joystick()
  {
  }

  StateChange_(const ContainerAllocator& _alloc)
  : new_state(_alloc)
  , joystick(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _new_state_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  new_state;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _joystick_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  joystick;


private:
  static const char* __s_getDataType_() { return "clearpath_horizon/StateChange"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "44a4273c39fe35090d35b71e32a477da"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string new_state\n\
string joystick\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, new_state);
    ros::serialization::serialize(stream, joystick);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, new_state);
    ros::serialization::deserialize(stream, joystick);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(new_state);
    size += ros::serialization::serializationLength(joystick);
    return size;
  }

  typedef boost::shared_ptr< ::clearpath_horizon::StateChange_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::clearpath_horizon::StateChange_<ContainerAllocator>  const> ConstPtr;
}; // struct StateChange
typedef  ::clearpath_horizon::StateChange_<std::allocator<void> > StateChange;

typedef boost::shared_ptr< ::clearpath_horizon::StateChange> StateChangePtr;
typedef boost::shared_ptr< ::clearpath_horizon::StateChange const> StateChangeConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::clearpath_horizon::StateChange_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::clearpath_horizon::StateChange_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace clearpath_horizon

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::clearpath_horizon::StateChange_<ContainerAllocator> > {
  static const char* value() 
  {
    return "44a4273c39fe35090d35b71e32a477da";
  }

  static const char* value(const  ::clearpath_horizon::StateChange_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x44a4273c39fe3509ULL;
  static const uint64_t static_value2 = 0x0d35b71e32a477daULL;
};

template<class ContainerAllocator>
struct DataType< ::clearpath_horizon::StateChange_<ContainerAllocator> > {
  static const char* value() 
  {
    return "clearpath_horizon/StateChange";
  }

  static const char* value(const  ::clearpath_horizon::StateChange_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::clearpath_horizon::StateChange_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string new_state\n\
string joystick\n\
\n\
";
  }

  static const char* value(const  ::clearpath_horizon::StateChange_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::clearpath_horizon::StateChange_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.new_state);
    stream.next(m.joystick);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StateChange_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::clearpath_horizon::StateChange_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::clearpath_horizon::StateChange_<ContainerAllocator> & v) 
  {
    s << indent << "new_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.new_state);
    s << indent << "joystick: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joystick);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CLEARPATH_HORIZON_MESSAGE_STATECHANGE_H

