/* Auto-generated by genmsg_cpp for file /home/ahmed/me597/ROS_packages/gps_umd/gps_common/msg/GPSStatus.msg */
#ifndef GPS_COMMON_MESSAGE_GPSSTATUS_H
#define GPS_COMMON_MESSAGE_GPSSTATUS_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "std_msgs/Header.h"

namespace gps_common
{
template <class ContainerAllocator>
struct GPSStatus_ : public ros::Message
{
  typedef GPSStatus_<ContainerAllocator> Type;

  GPSStatus_()
  : header()
  , satellites_used(0)
  , satellite_used_prn()
  , satellites_visible(0)
  , satellite_visible_prn()
  , satellite_visible_z()
  , satellite_visible_azimuth()
  , satellite_visible_snr()
  , status(0)
  , motion_source(0)
  , orientation_source(0)
  , position_source(0)
  {
  }

  GPSStatus_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , satellites_used(0)
  , satellite_used_prn(_alloc)
  , satellites_visible(0)
  , satellite_visible_prn(_alloc)
  , satellite_visible_z(_alloc)
  , satellite_visible_azimuth(_alloc)
  , satellite_visible_snr(_alloc)
  , status(0)
  , motion_source(0)
  , orientation_source(0)
  , position_source(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef uint16_t _satellites_used_type;
  uint16_t satellites_used;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _satellite_used_prn_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  satellite_used_prn;

  typedef uint16_t _satellites_visible_type;
  uint16_t satellites_visible;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _satellite_visible_prn_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  satellite_visible_prn;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _satellite_visible_z_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  satellite_visible_z;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _satellite_visible_azimuth_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  satellite_visible_azimuth;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _satellite_visible_snr_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  satellite_visible_snr;

  typedef uint16_t _status_type;
  uint16_t status;

  typedef uint16_t _motion_source_type;
  uint16_t motion_source;

  typedef uint16_t _orientation_source_type;
  uint16_t orientation_source;

  typedef uint16_t _position_source_type;
  uint16_t position_source;

  enum { STATUS_NO_FIX = 0 };
  enum { STATUS_FIX = 1 };
  enum { STATUS_DGPS_FIX = 3 };
  enum { STATUS_WAAS_FIX = 5 };
  enum { SOURCE_NONE = 0 };
  enum { SOURCE_GPS = 1 };
  enum { SOURCE_POINTS = 2 };
  enum { SOURCE_DOPPLER = 4 };
  enum { SOURCE_ALTIMETER = 8 };
  enum { SOURCE_MAGNETIC = 16 };
  enum { SOURCE_GYRO = 32 };
  enum { SOURCE_ACCEL = 64 };

  ROS_DEPRECATED uint32_t get_satellite_used_prn_size() const { return (uint32_t)satellite_used_prn.size(); }
  ROS_DEPRECATED void set_satellite_used_prn_size(uint32_t size) { satellite_used_prn.resize((size_t)size); }
  ROS_DEPRECATED void get_satellite_used_prn_vec(std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other > & vec) const { vec = this->satellite_used_prn; }
  ROS_DEPRECATED void set_satellite_used_prn_vec(const std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other > & vec) { this->satellite_used_prn = vec; }
  ROS_DEPRECATED uint32_t get_satellite_visible_prn_size() const { return (uint32_t)satellite_visible_prn.size(); }
  ROS_DEPRECATED void set_satellite_visible_prn_size(uint32_t size) { satellite_visible_prn.resize((size_t)size); }
  ROS_DEPRECATED void get_satellite_visible_prn_vec(std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other > & vec) const { vec = this->satellite_visible_prn; }
  ROS_DEPRECATED void set_satellite_visible_prn_vec(const std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other > & vec) { this->satellite_visible_prn = vec; }
  ROS_DEPRECATED uint32_t get_satellite_visible_z_size() const { return (uint32_t)satellite_visible_z.size(); }
  ROS_DEPRECATED void set_satellite_visible_z_size(uint32_t size) { satellite_visible_z.resize((size_t)size); }
  ROS_DEPRECATED void get_satellite_visible_z_vec(std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other > & vec) const { vec = this->satellite_visible_z; }
  ROS_DEPRECATED void set_satellite_visible_z_vec(const std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other > & vec) { this->satellite_visible_z = vec; }
  ROS_DEPRECATED uint32_t get_satellite_visible_azimuth_size() const { return (uint32_t)satellite_visible_azimuth.size(); }
  ROS_DEPRECATED void set_satellite_visible_azimuth_size(uint32_t size) { satellite_visible_azimuth.resize((size_t)size); }
  ROS_DEPRECATED void get_satellite_visible_azimuth_vec(std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other > & vec) const { vec = this->satellite_visible_azimuth; }
  ROS_DEPRECATED void set_satellite_visible_azimuth_vec(const std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other > & vec) { this->satellite_visible_azimuth = vec; }
  ROS_DEPRECATED uint32_t get_satellite_visible_snr_size() const { return (uint32_t)satellite_visible_snr.size(); }
  ROS_DEPRECATED void set_satellite_visible_snr_size(uint32_t size) { satellite_visible_snr.resize((size_t)size); }
  ROS_DEPRECATED void get_satellite_visible_snr_vec(std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other > & vec) const { vec = this->satellite_visible_snr; }
  ROS_DEPRECATED void set_satellite_visible_snr_vec(const std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other > & vec) { this->satellite_visible_snr = vec; }
private:
  static const char* __s_getDataType_() { return "gps_common/GPSStatus"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "1002b6c11b093a7fb9bf266d1de57fcb"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "Header header\n\
\n\
# Satellites used in solution\n\
uint16 satellites_used # Number of satellites\n\
int32[] satellite_used_prn # PRN identifiers\n\
\n\
# Satellites visible\n\
uint16 satellites_visible\n\
int32[] satellite_visible_prn # PRN identifiers\n\
int32[] satellite_visible_z # Elevation of satellites\n\
int32[] satellite_visible_azimuth # Azimuth of satellites\n\
int32[] satellite_visible_snr # Signal-to-noise ratios (dB)\n\
\n\
# Measurement status\n\
uint16 STATUS_NO_FIX=0   # Unable to fix position\n\
uint16 STATUS_FIX=1      # Normal fix\n\
uint16 STATUS_DGPS_FIX=3 # Fixed with DGPS\n\
uint16 STATUS_WAAS_FIX=5 # Fixed with WAAS\n\
uint16 status\n\
\n\
uint16 SOURCE_NONE=0 # No information is available\n\
uint16 SOURCE_GPS=1 # Using standard GPS location [only valid for position_source]\n\
uint16 SOURCE_POINTS=2 # Motion/orientation fix is derived from successive points\n\
uint16 SOURCE_DOPPLER=4 # Motion is derived using the Doppler effect\n\
uint16 SOURCE_ALTIMETER=8 # Using an altimeter\n\
uint16 SOURCE_MAGNETIC=16 # Using magnetic sensors\n\
uint16 SOURCE_GYRO=32 # Using gyroscopes\n\
uint16 SOURCE_ACCEL=64 # Using accelerometers\n\
\n\
uint16 motion_source # Source for speed, climb and track\n\
uint16 orientation_source # Source for device orientation\n\
uint16 position_source # Source for position\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, satellites_used);
    ros::serialization::serialize(stream, satellite_used_prn);
    ros::serialization::serialize(stream, satellites_visible);
    ros::serialization::serialize(stream, satellite_visible_prn);
    ros::serialization::serialize(stream, satellite_visible_z);
    ros::serialization::serialize(stream, satellite_visible_azimuth);
    ros::serialization::serialize(stream, satellite_visible_snr);
    ros::serialization::serialize(stream, status);
    ros::serialization::serialize(stream, motion_source);
    ros::serialization::serialize(stream, orientation_source);
    ros::serialization::serialize(stream, position_source);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, satellites_used);
    ros::serialization::deserialize(stream, satellite_used_prn);
    ros::serialization::deserialize(stream, satellites_visible);
    ros::serialization::deserialize(stream, satellite_visible_prn);
    ros::serialization::deserialize(stream, satellite_visible_z);
    ros::serialization::deserialize(stream, satellite_visible_azimuth);
    ros::serialization::deserialize(stream, satellite_visible_snr);
    ros::serialization::deserialize(stream, status);
    ros::serialization::deserialize(stream, motion_source);
    ros::serialization::deserialize(stream, orientation_source);
    ros::serialization::deserialize(stream, position_source);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(satellites_used);
    size += ros::serialization::serializationLength(satellite_used_prn);
    size += ros::serialization::serializationLength(satellites_visible);
    size += ros::serialization::serializationLength(satellite_visible_prn);
    size += ros::serialization::serializationLength(satellite_visible_z);
    size += ros::serialization::serializationLength(satellite_visible_azimuth);
    size += ros::serialization::serializationLength(satellite_visible_snr);
    size += ros::serialization::serializationLength(status);
    size += ros::serialization::serializationLength(motion_source);
    size += ros::serialization::serializationLength(orientation_source);
    size += ros::serialization::serializationLength(position_source);
    return size;
  }

  typedef boost::shared_ptr< ::gps_common::GPSStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gps_common::GPSStatus_<ContainerAllocator>  const> ConstPtr;
}; // struct GPSStatus
typedef  ::gps_common::GPSStatus_<std::allocator<void> > GPSStatus;

typedef boost::shared_ptr< ::gps_common::GPSStatus> GPSStatusPtr;
typedef boost::shared_ptr< ::gps_common::GPSStatus const> GPSStatusConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::gps_common::GPSStatus_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::gps_common::GPSStatus_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace gps_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::gps_common::GPSStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1002b6c11b093a7fb9bf266d1de57fcb";
  }

  static const char* value(const  ::gps_common::GPSStatus_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1002b6c11b093a7fULL;
  static const uint64_t static_value2 = 0xb9bf266d1de57fcbULL;
};

template<class ContainerAllocator>
struct DataType< ::gps_common::GPSStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "gps_common/GPSStatus";
  }

  static const char* value(const  ::gps_common::GPSStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::gps_common::GPSStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
# Satellites used in solution\n\
uint16 satellites_used # Number of satellites\n\
int32[] satellite_used_prn # PRN identifiers\n\
\n\
# Satellites visible\n\
uint16 satellites_visible\n\
int32[] satellite_visible_prn # PRN identifiers\n\
int32[] satellite_visible_z # Elevation of satellites\n\
int32[] satellite_visible_azimuth # Azimuth of satellites\n\
int32[] satellite_visible_snr # Signal-to-noise ratios (dB)\n\
\n\
# Measurement status\n\
uint16 STATUS_NO_FIX=0   # Unable to fix position\n\
uint16 STATUS_FIX=1      # Normal fix\n\
uint16 STATUS_DGPS_FIX=3 # Fixed with DGPS\n\
uint16 STATUS_WAAS_FIX=5 # Fixed with WAAS\n\
uint16 status\n\
\n\
uint16 SOURCE_NONE=0 # No information is available\n\
uint16 SOURCE_GPS=1 # Using standard GPS location [only valid for position_source]\n\
uint16 SOURCE_POINTS=2 # Motion/orientation fix is derived from successive points\n\
uint16 SOURCE_DOPPLER=4 # Motion is derived using the Doppler effect\n\
uint16 SOURCE_ALTIMETER=8 # Using an altimeter\n\
uint16 SOURCE_MAGNETIC=16 # Using magnetic sensors\n\
uint16 SOURCE_GYRO=32 # Using gyroscopes\n\
uint16 SOURCE_ACCEL=64 # Using accelerometers\n\
\n\
uint16 motion_source # Source for speed, climb and track\n\
uint16 orientation_source # Source for device orientation\n\
uint16 position_source # Source for position\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::gps_common::GPSStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::gps_common::GPSStatus_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::gps_common::GPSStatus_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::gps_common::GPSStatus_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.satellites_used);
    stream.next(m.satellite_used_prn);
    stream.next(m.satellites_visible);
    stream.next(m.satellite_visible_prn);
    stream.next(m.satellite_visible_z);
    stream.next(m.satellite_visible_azimuth);
    stream.next(m.satellite_visible_snr);
    stream.next(m.status);
    stream.next(m.motion_source);
    stream.next(m.orientation_source);
    stream.next(m.position_source);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GPSStatus_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gps_common::GPSStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::gps_common::GPSStatus_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "satellites_used: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.satellites_used);
    s << indent << "satellite_used_prn[]" << std::endl;
    for (size_t i = 0; i < v.satellite_used_prn.size(); ++i)
    {
      s << indent << "  satellite_used_prn[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.satellite_used_prn[i]);
    }
    s << indent << "satellites_visible: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.satellites_visible);
    s << indent << "satellite_visible_prn[]" << std::endl;
    for (size_t i = 0; i < v.satellite_visible_prn.size(); ++i)
    {
      s << indent << "  satellite_visible_prn[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.satellite_visible_prn[i]);
    }
    s << indent << "satellite_visible_z[]" << std::endl;
    for (size_t i = 0; i < v.satellite_visible_z.size(); ++i)
    {
      s << indent << "  satellite_visible_z[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.satellite_visible_z[i]);
    }
    s << indent << "satellite_visible_azimuth[]" << std::endl;
    for (size_t i = 0; i < v.satellite_visible_azimuth.size(); ++i)
    {
      s << indent << "  satellite_visible_azimuth[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.satellite_visible_azimuth[i]);
    }
    s << indent << "satellite_visible_snr[]" << std::endl;
    for (size_t i = 0; i < v.satellite_visible_snr.size(); ++i)
    {
      s << indent << "  satellite_visible_snr[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.satellite_visible_snr[i]);
    }
    s << indent << "status: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.status);
    s << indent << "motion_source: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.motion_source);
    s << indent << "orientation_source: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.orientation_source);
    s << indent << "position_source: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.position_source);
  }
};


} // namespace message_operations
} // namespace ros

#endif // GPS_COMMON_MESSAGE_GPSSTATUS_H

